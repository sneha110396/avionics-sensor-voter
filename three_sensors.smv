-- Module realWorld will generate signal values between a given range

MODULE realWorld                    

DEFINE
	MAX_VAL:= 10;		  -- maximum value of the signal
	MIN_VAL:= -10;		  -- minimum value of the signal

VAR
	out : MIN_VAL..MAX_VAL;   -- variable to generate random signal values between MIN_VAL and MAX_VAL

-----------------------------------------------------------------------------------------------------------------------------------------------------

-- Module sensor will create sensors which will measure the signal values created by realWorld Module
-- It takes the realWorld module as input
-- Each sensor will have a noise. Each sensor can have three types of "fault"
-- Each sensor will output a signal value and a hardware flag
-- hardware flag of each sensor indicates if there is a hardware fault in the sensor or not

MODULE sensor(world)

VAR
	hw_valid: boolean;         -- TRUE means hardware flag is indicating valid, FALSE otherwise
	
	fault: 0..2;               -- 0 means no fault
	                           -- 1 means signal is an arbitrary value
				   -- 2 means hw_valid may not be correct
				   
	noise: -1..1;              -- noise can be between -1 to 1
	
	signal: (world.MIN_VAL) .. (world.MAX_VAL); 
	
	

ASSIGN
	-- intially fault is 0
	init(fault) := 0;                                 
	-- each step it will take arbitrary value between 0 and 2
	
				

	
-- hw_valid will take any arbitraey boolean value
-- If fault = 0, hw_valid will be TRUE
	
INVAR (fault=0 -> hw_valid=TRUE)

-- signal can take any arbitrary value between MIN_VAL and MAX_VAL
-- If fault is 0, signal value will be realWorld value + noise
-- If the signal value exceeds the MAX_VAL, we will set the signal value as MAX_VAL
-- If signal value becomes less than MIN_VAL, we will set the signal value as MIN_VAL
-- If fault is not 0, signal can take any arbitrary value between MAX_VAL and MIN_VAL
	

INVAR (fault=0 & (abs(world.out + noise) <=world.MAX_VAL)) -> (signal = world.out + noise)
INVAR (fault=0 & (world.out + noise) > world.MAX_VAL) -> (signal = world.MAX_VAL)
INVAR (fault=0 & (world.out + noise) < world.MIN_VAL) -> (signal = world.MIN_VAL)

			
------------------------------------------------------------------------------------------------------------------------------------------------------


-- Main module will work as the voter here

MODULE main               			       

DEFINE
	HW_PERSISTENCE := 4;                           -- hardware persistence 
	MC_PERSISTENCE := 4;                           -- miscompare persistence
    	MC_val_threshold := 2;                         -- two sensor miscompare if their signal value differ more than this threshold

VAR
   	rWorld : realWorld();			       -- Instance of the realWorld module
	
	sensor1 : sensor(rWorld);		       -- First Instance of sensor module
	sensor2 : sensor(rWorld);		       -- Second instance of sensor module
	sensor3 : sensor(rWorld);		       -- Third instance of sensor module
	
	hw_count: array 1..3 of 0..HW_PERSISTENCE;     -- variable to measure hardware error persistence
	
	mc_count: array 1..3 of 0..MC_PERSISTENCE;     -- variable to measure miscompare persistence

	isolated: array 1..3 of boolean;               -- TRUE if sensors are isolated
	
	landmark : {"reset", "thres_hit"};             -- variable to indicate if the miscompare variable reached threshold or did reset
	

ASSIGN 

	-- Initially, value of isolated is FALSE for all sensors
	
	init(isolated[1]) := FALSE;
	init(isolated[2]) := FALSE;
	init(isolated[3]) := FALSE;
	
	-- If hardware count of a sensor reaches hardware persisitence, sensor will be isolated
	-- If number of active sensors is three and miscopmpare count of that sensor reaches miscompare persistence, sensor will be isolated
	-- isolated will be TRUE is the corresponding sensor is isolated
	
	next(isolated[1]) := case
				(hw_count[1]=HW_PERSISTENCE) | (numActive=3 & mc_count[1]=MC_PERSISTENCE) : TRUE;
				isolated[1] : TRUE;
				TRUE : FALSE;
				esac;
				
	next(isolated[2]) := case
				(hw_count[2]=HW_PERSISTENCE) | (numActive=3 & mc_count[2]=MC_PERSISTENCE) : TRUE;
				isolated[2] : TRUE;
				TRUE : FALSE;
				esac;
				
	next(isolated[3]) := case
				(hw_count[3]=HW_PERSISTENCE) | (numActive=3 & mc_count[3]=MC_PERSISTENCE) : TRUE;
				isolated[3] : TRUE;
				TRUE : FALSE;
				esac;
				
	-- Value of hardware count is zero initially for all sensors
	
	init(hw_count[1]) := 0;
	init(hw_count[2]) := 0;
	init(hw_count[3]) := 0;
	
	-- If hardware flag of some sensor if FALSE, then hardware count will increase by one, provided it is less than the persistence level
	
	next(hw_count[1]) := case
				(next(sensor1.hw_valid) = FALSE) & (hw_count[1]<HW_PERSISTENCE) : hw_count[1]+1;
				next(sensor1.hw_valid) = TRUE : 0;
				hw_count[1]=HW_PERSISTENCE : HW_PERSISTENCE;
				TRUE : hw_count[1];
				esac;
				
	next(hw_count[2]) := case
				(next(sensor2.hw_valid) = FALSE) & (hw_count[2]<HW_PERSISTENCE) : hw_count[2]+1;
				next(sensor2.hw_valid) = TRUE : 0;
				hw_count[2]=HW_PERSISTENCE : HW_PERSISTENCE;
				TRUE : hw_count[2];
				esac;

	next(hw_count[3]) := case
				(next(sensor3.hw_valid) = FALSE) & (hw_count[3]<HW_PERSISTENCE) : hw_count[3]+1;
				next(sensor3.hw_valid) = TRUE : 0;
				hw_count[3]=HW_PERSISTENCE : HW_PERSISTENCE;
				TRUE : hw_count[3];
				esac;
				
	-- Miscompare count will be zero initially for all the sensors
	
	init(mc_count[1]) := 0;
	init(mc_count[2]) := 0;
	init(mc_count[3]) := 0;
	
	-- When there are three active sensors, it will increase by one if the respective sensor is miscomparing
	-- When there are two active sensors and the respective sensor is isolated, it will count the miscompare between the other two sensors
	-- When the output is valid, it will increment it's value when there is a miscompare and and reset it's value if miscompare clears
	-- When output is not valid, it will increment if there is a miscompare, decrement otherwise
	
	next(mc_count[1]) := case
	                        -- three active sensors
				(next(numActive)=3) & next(miscompare1)=TRUE & (mc_count[1]<MC_PERSISTENCE) : mc_count[1] +1;
				(next(numActive)=3) & next(miscompare1)=FALSE & (mc_count[1]<MC_PERSISTENCE): 0;
				(numActive=3) & (mc_count[1]=MC_PERSISTENCE) : 0;
				
				-- two active sensors
				next(numActive)=2 & next(isolated[1])=TRUE & (next(diff_23) > MC_val_threshold) & (mc_count[1] < MC_PERSISTENCE): mc_count[1]+1;
				next(numActive)=2 & next(isolated[1])=TRUE & next(landmark)= "reset" & (next(diff_23) <= MC_val_threshold) : 0;
				next(numActive)=2 & next(isolated[1])=TRUE & next(landmark)= "thres_hit" & (next(diff_23) <= MC_val_threshold) & (mc_count[1] >0) : mc_count[1] - 1;
				TRUE : mc_count[1];
				esac;
				
	next(mc_count[2]) := case
				-- three active sensors
				(next(numActive)=3) & next(miscompare2)=TRUE & (mc_count[2]<MC_PERSISTENCE) : mc_count[2] +1;
				(next(numActive)=3) & next(miscompare2)=FALSE & (mc_count[2]<MC_PERSISTENCE): 0;
				(numActive=3) & (mc_count[2]=MC_PERSISTENCE) : 0;

				-- two active sensors
				next(numActive)=2 & next(isolated[2])=TRUE & (next(diff_13) > MC_val_threshold) & (mc_count[2] < MC_PERSISTENCE): mc_count[2]+1;
				next(numActive)=2 & next(isolated[2])=TRUE & next(landmark)="reset" & (next(diff_13) <= MC_val_threshold) : 0;
				next(numActive)=2 & next(isolated[2])=TRUE & next(landmark)="thres_hit" & (next(diff_13) <= MC_val_threshold) & (mc_count[2] >0) : mc_count[2] - 1;
				TRUE : mc_count[2];
				esac;

	next(mc_count[3]) := case
				--- three active sensors
				next(numActive)=3 & next(miscompare3)=TRUE & (mc_count[3]<MC_PERSISTENCE) : mc_count[3] +1;
				next(numActive)=3 & next(miscompare3)=FALSE & (mc_count[3]<MC_PERSISTENCE) : 0;
				(numActive=3) & (mc_count[3]=MC_PERSISTENCE) : 0;

				-- two active sensors
				next(numActive)=2 & next(isolated[3])=TRUE & (next(diff_12) > MC_val_threshold) & (mc_count[3] < MC_PERSISTENCE): mc_count[3]+1;
				next(numActive)=2 & next(isolated[3])=TRUE & next(landmark)="reset" & (next(diff_12) <= MC_val_threshold) : 0;
				next(numActive)=2 & next(isolated[3])=TRUE & next(landmark)="thres_hit" & (next(diff_12) <= MC_val_threshold) & (mc_count[3] >0) : mc_count[3] - 1;
				TRUE : mc_count[3];
				esac;

	-- We need "landmark" when there are only two valid sensors
	-- landmark will take the value "reset", if the working miscompare count has done reset previously
	-- landmark will take thw value "thres_hit" if the working miscompare count has reached the threshold previously
				
	init(landmark):= "reset";
	next(landmark):= case
						numActive=2 & isolated[1] & mc_count[1]=MC_PERSISTENCE : "thres_hit";
						numActive=2 & isolated[2] & mc_count[2]=MC_PERSISTENCE : "thres_hit";
						numActive=2 & isolated[3] & mc_count[3]=MC_PERSISTENCE : "thres_hit";
						numActive=2 & isolated[1] & mc_count[1]=0 : "reset";
						numActive=2 & isolated[2] & mc_count[2]=0 : "reset";
						numActive=2 & isolated[3] & mc_count[3]=0 : "reset";
						TRUE: landmark;
						esac;
				
							
DEFINE
	-- calculating the differences between the signal values of the sensors
	
	diff_12 := abs(sensor1.signal - sensor2.signal);
	diff_23 := abs(sensor2.signal - sensor3.signal);
	diff_13 := abs(sensor1.signal - sensor3.signal);
	
	-- Two sensors are said to be miscomparing if the differences between their signal values is more than the threshold
	
	-- miscompare1 means sensor1 is miscomparing with the other two sensors
	
	miscompare1 :=  (diff_13 > MC_val_threshold) & (diff_12 > MC_val_threshold);
	
	-- miscompare2 means sensor2 is miscomparing with the other two sensors
	
	miscompare2 :=  (diff_12 > MC_val_threshold) & (diff_23 > MC_val_threshold);
	
	-- miscompare3 means sensor3 is miscomparing with the other two sensors
	
	miscompare3 :=  (diff_13 > MC_val_threshold) & (diff_23 > MC_val_threshold);
	
	-- Calculating number of active sensors at each step
	
	none_isolated := !isolated[1] & !isolated[2] & !isolated[3];
	one_isolated := (isolated[1] & !isolated[2] & !isolated[3]) | (!isolated[1] & isolated[2] & !isolated[3]) | (!isolated[1] & !isolated[2] & isolated[3]);
	two_isolated := (isolated[1] & isolated[2] & !isolated[3]) | (!isolated[1] & isolated[2] & isolated[3]) | (isolated[1] & !isolated[2] & isolated[3]);
	all_isolated := isolated[1] & isolated[2] & isolated[3];
	
	numActive := case
			none_isolated : 3;
			one_isolated : 2;
			two_isolated : 1;
			all_isolated : 0;
			esac;
			
	-- Output signal is the average value the signal values of all the active sensors
			
	outputSignal := case
			numActive=3 : (sensor1.signal + sensor2.signal + sensor3.signal)/3;
			numActive=2 & isolated[1]: (sensor2.signal + sensor3.signal)/2;
			numActive=2 & isolated[2]: (sensor3.signal + sensor1.signal)/2;
			numActive=2 & isolated[3]: (sensor1.signal + sensor2.signal)/2;
			numActive=1 & isolated[1] & isolated[2] : sensor3.signal;
			numActive=1 & isolated[2] & isolated[3] : sensor1.signal;
			numActive=1 & isolated[3] & isolated[1] : sensor2.signal;
			numActive=0 : -100;
			esac;
			
	-- When there are three active sensors, output will be valid
	-- When there are two active sensors and the corresponding miscompare count has reached threshold, then output is not valid
	-- If the miscompare count is zero, then the output is valid
	-- If the miscompare count is less than threshold and greater than zero, then output is valid if landmark is "reset", not valid otherwise
	-- If there are one active sensor, output is valid
	-- If there are no active sensors, output is not valid 

	outputValid := case
	
			-- when there are three active sensors
			
			numActive=3 : TRUE;
			
			-- when there are two active sensors and sensor1 is isolated
			
			numActive=2 & isolated[1] & mc_count[1]=MC_PERSISTENCE : FALSE;
			numActive=2 & isolated[1] & mc_count[1]=0 : TRUE;
			numActive=2 & isolated[1] & mc_count[1] < MC_PERSISTENCE & mc_count[1] > 0 & landmark="thres_hit": FALSE;
			numActive=2 & isolated[1] & mc_count[1] < MC_PERSISTENCE & mc_count[1] > 0 & landmark="reset": TRUE;
			
			-- when there are two active sensors and sensor2 is isolated
			
			numActive=2 & isolated[2] & mc_count[2]=MC_PERSISTENCE : FALSE;
			numActive=2 & isolated[2] & mc_count[2]=0 : TRUE;
			numActive=2 & isolated[2] & mc_count[2] < MC_PERSISTENCE & mc_count[2] > 0 & landmark="thres_hit": FALSE;
			numActive=2 & isolated[2] & mc_count[2] < MC_PERSISTENCE & mc_count[2] > 0 & landmark="reset": TRUE;
			
			-- when there are two active sensors and sensor3 is isolated
			
			numActive=2 & isolated[3] & mc_count[3]=MC_PERSISTENCE : FALSE;
			numActive=2 & isolated[3] & mc_count[3]=0 : TRUE;
			numActive=2 & isolated[3] & mc_count[3] < MC_PERSISTENCE & mc_count[3] > 0 & landmark="thres_hit": FALSE;
			numActive=2 & isolated[3] & mc_count[3] < MC_PERSISTENCE & mc_count[3] > 0 & landmark="reset": TRUE;
			
			-- when there are one active sensor
			
			numActive=1 : TRUE;
			
			-- when there are no active sensor
			
			numActive=0 : FALSE;
			
			esac;
	
	-- If a sensor is not isolated, then its hw_count is less than threshold (required to describe a property)

	isolt_or_count_lt_persist := (!isolated[1] -> hw_count[1] < HW_PERSISTENCE) & (!isolated[2] -> hw_count[2] < HW_PERSISTENCE) & (!isolated[3] -> hw_count[3] < HW_PERSISTENCE);
	
	-- hw_count of one of the sensors reaches the persistence

	hw_fault := (hw_count[1] = HW_PERSISTENCE) | (hw_count[2] = HW_PERSISTENCE) | (hw_count[3] = HW_PERSISTENCE); 

	-- mc_count of one sensor reaches persistence

	mc_fault := (mc_count[1] = MC_PERSISTENCE) | (mc_count[2] = MC_PERSISTENCE) | (mc_count[3] = MC_PERSISTENCE);

--Invariants	

INVAR !((isolated[1]=FALSE & sensor1.fault!=0) & (isolated[2]=FALSE & sensor2.fault!=0)) 
INVAR !((isolated[1]=FALSE & sensor1.fault!=0) & (isolated[3]=FALSE & sensor3.fault!=0))
INVAR !((isolated[2]=FALSE & sensor2.fault!=0) & (isolated[3]=FALSE & sensor3.fault!=0))


--properties to check

-- If the system has reached numActive=2, it can not go back to numActive=3. Similarly for numActive=1 and 0

CTLSPEC AG(numActive=2-> (AG(numActive!=3)))
CTLSPEC AG(numActive=1-> (AG(numActive!=2)))
CTLSPEC AG(numActive=0-> (!EF(numActive=1)))

-- If the system is in numActive 3, it is possible to reach numActive 2 and so on
 
CTLSPEC AG(numActive=3 -> EF(numActive=2))
CTLSPEC AG(numActive=2 -> EF(numActive=1))
CTLSPEC AG(numActive=1-> EF(numActive=0))

-- If the system is in numActive 2 and output is valid and all active sensors has hw_count less than threshold, then it can reach numActive 2 and output not valid
-- Same for output not valid to outputvalid

CTLSPEC AG((numActive=2 & outputValid & isolt_or_count_lt_persist) -> EF(numActive=2 & !outputValid))
CTLSPEC AG((numActive=2 & !outputValid & isolt_or_count_lt_persist) -> EF(numActive=2 & outputValid))

-- If numActive is three and one sensor's miscompare count reaches persistence, then it will reach numActive 2

CTLSPEC AG((numActive=3 & mc_fault) -> AF(numActive=2))

-- If numActive is three and one sensor's hardware fault reaches persistence, then it will reach numActive 2

CTLSPEC AG((numActive=3 & hw_fault) -> AF(numActive=2))

CTLSPEC AG((outputSignal= rWorld.out) -> AF(A[(outputSignal = rWorld.out) U ((outputSignal= rWorld.out) & outputValid)] | (outputSignal = rWorld.out)))
